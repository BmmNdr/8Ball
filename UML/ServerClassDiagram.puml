@startuml ServerClass

skinparam linetype ortho

class Ball {
  + Ball(Coord, boolean, int): 
  + stop: boolean
  + coordinate: Coord
  + number: int
  + velocity: Vector
  + isMoving: boolean
  + isHalf: boolean
  + isPotted: boolean
  + run(): void
  + setX(double): void
  + getDX(): double
  + toString(): String
  + getSpeed(): double
  - checkPot(): void
  + setY(double): void
  + getY(): double
  + getAngle(): double
  + getX(): double
  + setMagnitude(double, double): void
  + getDY(): double
  + pot(): void
  - wallCollision(): void
  + setAngle(double, double): void
}
class CollisionCheck {
  + CollisionCheck(List<Ball>): 
  + firstPot: Ball
  + firstCueHit: Ball
  - balls: List<Ball>
  - ballsMoving(): boolean
  - resolveCollision(Ball, Ball): void
  + run(): void
  - collideWith(Ball, Ball): boolean
  - resolveOverlap(Ball, Ball): void
}
class Constants {
  + Constants(): 
  + tableFriction: double
  + potsPositions: Coord[]
  + tableHeight: int
  + potDiameter: int
  + ballMass: double
  + table: Coord
  + ballDiameter: int
  + tableWidth: int
  + getBallsInitialPositions(): Coord[]
  + getRadius(): int
}
class Coord {
  + Coord(double, double): 
  + x: double
  + y: double
  + getX(): double
  + setY(double): void
  + distance(Coord): double
  + setX(double): void
  + getY(): double
}
class GameManager {
  ~ GameManager(): 
  ~ potInTurn: boolean
  ~ player1: Player
  ~ foulInTurn: boolean
  ~ balls: List<Ball>
  ~ collisionCheck: CollisionCheck
  ~ turn: boolean
  ~ threadSend: ThreadSend
  ~ player2: Player
  + debugMode: boolean
  + ballsMoving(): boolean
  + setPlayer(Player): boolean
  + sendBallsPosition(): void
  + moveBalls(): void
  + StartGame(): void
  + checkEndGame(): int
  + Turn(): void
}
class Player {
  + Player(Socket): 
  + balls: List<Ball>
  + hasHalf: Boolean
  - out: PrintWriter
  - in: BufferedReader
  - clientSocket: Socket
  + lose(): void
  + win(): void
  + pWait(): void
  + sendBallsPositions(String): void
  + yourTurn(): Vector
}
class ThreadSend {
  + ThreadSend(GameManager): 
  ~ game: GameManager
  + run(): void
  + sendBallsPosition(): void
  - ballsMoving(): boolean
}
class Vector {
  + Vector(double, double): 
  ~ Vector(): 
  + angle: double
  + speed: double
  + getCoord(): Coord
}
class server {
  + server(): 
  ~ port: int
  ~ startGame: boolean
  ~ game: GameManager
  ~ serverSocket: ServerSocket
  + main(String[]): void
}

Ball           "1" *-[#595959,plain]-> "coordinate\n1" Coord          
Ball           "1" *-[#595959,plain]-> "velocity\n1" Vector         
CollisionCheck "1" *-[#595959,plain]-> "balls\n*" Ball           
Constants      "1" *-[#595959,plain]-> "potsPositions\n*" Coord          
GameManager    "1" *-[#595959,plain]-> "balls\n*" Ball           
GameManager    "1" *-[#595959,plain]-> "collisionCheck\n1" CollisionCheck 
GameManager    "1" *-[#595959,plain]-> "player1\n1" Player         
GameManager    "1" *-[#595959,plain]-> "threadSend\n1" ThreadSend     
Player         "1" *-[#595959,plain]-> "balls\n*" Ball           
ThreadSend     "1" *-[#595959,plain]-> "game\n1" GameManager    
server         "1" *-[#595959,plain]-> "game\n1" GameManager    
@enduml
